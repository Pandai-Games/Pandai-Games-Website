# GitLab CI/CD Pipeline for Pandai Games Website
# This pipeline builds and deploys the React client and Node.js server

stages:
  - install
  - test
  - build
  - deploy

variables:
  NODE_VERSION: "18"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

# Cache node_modules for faster builds
cache:
  paths:
    - client/node_modules/
    - server/node_modules/
    - .npm/

# Install dependencies for both client and server
install_dependencies:
  stage: install
  image: node:${NODE_VERSION}-alpine
  before_script:
    - npm config set cache .npm --global
  script:
    # Install client dependencies
    - cd client
    - npm ci --cache .npm --prefer-offline
    - cd ../server
    # Install server dependencies
    - npm ci --cache .npm --prefer-offline
  artifacts:
    paths:
      - client/node_modules/
      - server/node_modules/
    expire_in: 1 hour
  only:
    - main
    - develop
    - merge_requests

# Test the client application
test_client:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - cd client
    - npm run test:ci || echo "No tests configured yet"
  coverage: '/Lines\s*:\s*(\d+\.\d+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: client/coverage/cobertura-coverage.xml
    paths:
      - client/coverage/
    expire_in: 30 days
  only:
    - main
    - develop
    - merge_requests

# Lint the client code
lint_client:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - cd client
    - npm run lint || echo "Linting completed with warnings"
  allow_failure: true
  only:
    - main
    - develop
    - merge_requests

# Test the server application
test_server:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - cd server
    - npm test || echo "No tests configured yet"
  only:
    - main
    - develop
    - merge_requests

# Build the client application
build_client:
  stage: build
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - cd client
    - npm run build
  artifacts:
    paths:
      - client/dist/
    expire_in: 1 week
  only:
    - main
    - develop

# Build Docker images (optional)
build_docker:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # Build client Docker image
    - |
      cat > client/Dockerfile << EOF
      FROM node:${NODE_VERSION}-alpine as build
      WORKDIR /app
      COPY package*.json ./
      RUN npm ci --only=production
      COPY . .
      RUN npm run build

      FROM nginx:alpine
      COPY --from=build /app/dist /usr/share/nginx/html
      COPY nginx.conf /etc/nginx/nginx.conf
      EXPOSE 80
      CMD ["nginx", "-g", "daemon off;"]
      EOF
    
    # Build server Docker image
    - |
      cat > server/Dockerfile << EOF
      FROM node:${NODE_VERSION}-alpine
      WORKDIR /app
      COPY package*.json ./
      RUN npm ci --only=production
      COPY . .
      EXPOSE 3000
      CMD ["npm", "start"]
      EOF
    
    # Build and push images
    - docker build -t $CI_REGISTRY_IMAGE/client:$CI_COMMIT_SHA client/
    - docker build -t $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA server/
    - docker push $CI_REGISTRY_IMAGE/client:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA
    
    # Tag as latest for main branch
    - |
      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        docker tag $CI_REGISTRY_IMAGE/client:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/client:latest
        docker tag $CI_REGISTRY_IMAGE/server:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/server:latest
        docker push $CI_REGISTRY_IMAGE/client:latest
        docker push $CI_REGISTRY_IMAGE/server:latest
      fi
  only:
    - main
    - develop
  when: manual

# Deploy to staging environment
deploy_staging:
  stage: deploy
  image: alpine:latest
  dependencies:
    - build_client
  before_script:
    - apk add --no-cache rsync openssh-client
    - eval $(ssh-agent -s)
    - echo "$STAGING_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $STAGING_SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Deploy client build files
    - rsync -avz --delete client/dist/ $STAGING_USER@$STAGING_SERVER:$STAGING_PATH/client/
    
    # Deploy server files
    - rsync -avz --exclude node_modules server/ $STAGING_USER@$STAGING_SERVER:$STAGING_PATH/server/
    
    # Restart services on staging server
    - ssh $STAGING_USER@$STAGING_SERVER "cd $STAGING_PATH/server && npm install --production && pm2 restart pandai-games-server || pm2 start index.js --name pandai-games-server"
  environment:
    name: staging
    url: https://staging.pandaigames.com
  only:
    - develop
  when: manual

# Deploy to production environment
deploy_production:
  stage: deploy
  image: alpine:latest
  dependencies:
    - build_client
  before_script:
    - apk add --no-cache rsync openssh-client
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PRODUCTION_SERVER >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Deploy client build files
    - rsync -avz --delete client/dist/ $PRODUCTION_USER@$PRODUCTION_SERVER:$PRODUCTION_PATH/client/
    
    # Deploy server files
    - rsync -avz --exclude node_modules server/ $PRODUCTION_USER@$PRODUCTION_SERVER:$PRODUCTION_PATH/server/
    
    # Restart services on production server
    - ssh $PRODUCTION_USER@$PRODUCTION_SERVER "cd $PRODUCTION_PATH/server && npm install --production && pm2 restart pandai-games-server || pm2 start index.js --name pandai-games-server"
  environment:
    name: production
    url: https://pandaigames.com
  only:
    - main
  when: manual

# Security scanning (optional)
security_scan:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - install_dependencies
  script:
    - cd client && npm audit --audit-level=high || true
    - cd ../server && npm audit --audit-level=high || true
  allow_failure: true
  only:
    - main
    - develop
    - merge_requests

# Performance testing (optional)
performance_test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build_client
  script:
    - npm install -g lighthouse-ci
    - lhci autorun || echo "Lighthouse CI not configured"
  artifacts:
    reports:
      performance: lighthouse-report.json
  allow_failure: true
  only:
    - main
  when: manual
